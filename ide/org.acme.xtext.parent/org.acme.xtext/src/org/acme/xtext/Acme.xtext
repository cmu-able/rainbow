grammar org.acme.Acme with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate acme "http://www.acme.org/Acme"

AcmeCompUnit:
	imports+=AcmeImportDeclaration*
	(systems+=AcmeSystemDeclaration |
	families+=AcmeFamilyDeclaration)+
;

AcmeImportDeclaration:
	'import' (file=Filename | lit=StringLiteral) ';';

StringLiteral:
	lit=STRING;

Filename:
	('$' | '%')? ID ((('.' | ':' | '-' | '+' | '\\' | '\\\\' | '/' | '$' | '%'))+ ID)*;

AcmeFamilyDeclaration:
	'family' name=ID 
	(
		';' |
		((('extends' refs+=[AcmeFamilyDeclaration|ID] (',' refs+=[AcmeFamilyDeclaration|ID])* 'with') | '=')
		 body=AcmeFamilyBody ';'?)
	
	
	)
;

enum Visibility:
	PUBLIC='public' | PRIVATE='private';

enum Extensability:
	FINAL='final' | ABSTRACT='abstract';

AcmeFamilyBody:
	{AcmeFamilyBody} '{'
	(
		portTypes+=AcmePortTypeDeclaration |
		roleTypes+=AcmeRoleTypeDeclaration |
		componentTypes+=AcmeComponentTypeDeclaration |
		connectorTypes+=AcmeConnectorTypeDeclaration |
		elementTypes+=AcmeElementTypeDeclaration |
		propertyTypes+=AcmePropertyTypeDeclaration |
		groupTypes+=AcmeGroupTypeDeclaration |
		functions+=DesignAnalysisDeclaration |
		rules+=DesignRule |
		components+=AcmeComponentDeclaration |
		connectors+=AcmeConnectorDeclaration |
		properties+=AcmePropertyDeclaration |
		groups+=AcmeGroupDeclaration |
		attachments+=AcmeAttachmentDeclaration	
	)*
	'}'
;
PropertyBearer:
	AcmeFamilyBody | AcmeSystemBody | AcmeComponentBody | AcmeConnectorBody | AcmePortBody | AcmeRoleBody | AcmeGroupBody | AcmeGenericElementBody
;

AcmeElementInstance:
	AcmeSystemDeclaration | AcmeComponentDeclaration | AcmeConnectorDeclaration | 
	AcmePortDeclaration | AcmeRoleDeclaration | AcmeGroupDeclaration
;

AcmeElementType:
	AcmeElementTypeDeclaration | AcmeFamilyDeclaration | AcmeComponentTypeDeclaration |
	AcmeConnectorTypeDeclaration |
	AcmePortTypeDeclaration | AcmeRoleTypeDeclaration |
	AcmeGroupTypeDeclaration
;

AcmeSystemDeclaration:
	'system' name=ID (':' declared+=[AcmeFamilyDeclaration] (',' declared+=[AcmeFamilyDeclaration])*)?
	(
		';' |
		( '=' 
			(
			(body=AcmeSystemBody ';'?) |
			(
				'new'instantiated+=[AcmeFamilyDeclaration|ID] (',' instantiated+=[AcmeFamilyDeclaration|ID])*
				(
					';' |
					('extended' 'with' body=AcmeSystemBody ';'?)
				)
			)
			
			)
		)
	)
;

AcmeSystemBody:
	{AcmeSystemBody} '{'
	(
		properties+=AcmePropertyDeclaration |
		components+=AcmeComponentDeclaration |
		connectors+=AcmeConnectorDeclaration |
		attachments+=AcmeAttachmentDeclaration |
		groups+=AcmeGroupDeclaration |
		rules+=DesignRule
	)*
	'}'
;
AcmeElementTypeDeclaration:
	(visibility=Visibility)? (extensibility=Extensability)? => 'element' 'type' name=ID 
	(
		';' |
		(
			('=' body=AcmeGenericElementBody ) | 
			('extends' refs+=[AcmeElementTypeDeclaration] (',' refs+=[AcmeElementTypeDeclaration])* 
				(';' | 'with' body=AcmeGenericElementBody ';'?)
			)
		)
	)
;

AcmeGenericElementBody:
	{AcmeGenericElementBody} '{'
	(
		properties+=AcmePropertyDeclaration |
		rules+=DesignRule
	)*
	'}'
;

AcmeGroupTypeDeclaration:
	(visibility=Visibility)? (extensibility=Extensability)? => 'group' 'type' name=ID 
	(
		';' |
		(
			('=' body=AcmeGroupBody ) | 
			('extends' refs+=[AcmeGroupTypeDeclaration] (',' refs+=[AcmeGroupTypeDeclaration])* 
				(';' | 'with' body=AcmeGroupBody ';'?)
			)
		)
	)
;

AcmeGroupDeclaration:
	'group' name=ID (':' declared+=[GroupOrGenericRef] (',' declared+=[GroupOrGenericRef])*)?
	(
		';' |
		('=' (
			(body=AcmeGroupBody ';'?) |
			(
				'new' instantiated+=[GroupOrGenericRef] (',' instantiated+=[GroupOrGenericRef])* 
				(
					';' |
					'extended' 'with' body=AcmeGroupBody ';'? 
				)
			)	
			
			)
		)
	)
;

GroupOrGenericRef:
	AcmeElementTypeDeclaration | AcmeGroupTypeDeclaration
;

AcmeGroupBody:
	{AcmeGroupBody} '{'
		(
			members+=MembersBlock |
			properties+=AcmePropertyDeclaration |
			rules+=DesignRule
		)*
	'}'
;

MembersBlock:
	{MembersBlock} 'members' '{'
		(
			refs+=[ElementsRef] (',' refs+=[ElementsRef])
		)?
	'}'
;

ElementsRef:
 	AcmeComponentDeclaration | AcmePortDeclaration | AcmeConnectorDeclaration | AcmeRoleDeclaration
;

QualifiedIdentifier returns ecore::EString:
	ID ('.' ID)*
;

AcmePortTypeDeclaration:
	(visibility+=Visibility)? (extensibility+=Extensability)? => 'port' 'type' name=ID 
	(
		';' |
		(
			('=' body=AcmePortBody  ';'?) | 
			('extends' refs+=[AcmePortTypeDeclaration|ID] (',' refs+=[AcmePortTypeDeclaration|ID])* 
				(';' | 'with' body=AcmePortBody ';'?)
			)
		)
	)
;

AcmePortDeclaration:
	'port' name=ID (':' declared+=[PortOrGenericRef] (',' declared+=[PortOrGenericRef])*)?
	(
		';' |
		('=' 
			(
				(body=AcmePortBody ';'?) |
				(
					'new' instantiated+=[PortOrGenericRef] (',' instantiated+=[PortOrGenericRef])* 
					(
						';' |
						'extended' 'with' body=AcmePortBody ';'? 
					)
				)
			
			)
		)
	)
;

PortOrGenericRef:
	AcmeElementTypeDeclaration | AcmePortTypeDeclaration
;	

AcmePortBody:
	{AcmePortBody} '{'
	(
		properties+=AcmePropertyDeclaration |
		rules+=DesignRule |
		representations+=AcmeRepresentationDeclaration
	)*
	'}'
;

AcmeRoleTypeDeclaration:
	(visibility+=Visibility)? (extensibility+=Extensability)? => 'role' 'type' name=ID 
	(
		';' |
		(
			('=' body=AcmePortBody ) | 
			('extends' refs+=[AcmeRoleTypeDeclaration] (',' refs+=[AcmeRoleTypeDeclaration])* 
				(';' | 'with' body=AcmePortBody ';'?)
			)
		)
	)
;

AcmeRoleDeclaration:
	'role' name=ID (':' declared+=[RoleOrGenericRef] (',' declared+=[RoleOrGenericRef])*)?
	(
		';' |
		'=' (
				(body=AcmeRoleBody ';'?) |
				(
					'new' instantiated+=[RoleOrGenericRef] (',' instantiated+=[RoleOrGenericRef])* 
					(
						';' |
						'extended' 'with' body=AcmeRoleBody ';'? 
					)
				)	
			)
	)
;

RoleOrGenericRef:
	AcmeElementTypeDeclaration | AcmeRoleTypeDeclaration
;	

AcmeRoleBody:
	{AcmeRoleBody} '{'
	(
		properties+=AcmePropertyDeclaration |
		rules+=DesignRule |
		representations+=AcmeRepresentationDeclaration
	)*
	'}'
;


AcmeComponentTypeDeclaration:
	(visibility+=Visibility)? (extensibility+=Extensability)? => 'component' 'type' name=ID 
	(
		';' |
		(
			('=' body=AcmeComponentBody ) | 
			('extends' refs+=[AcmeComponentTypeDeclaration] (',' refs+=[AcmeComponentTypeDeclaration])* 
				(';' | 'with' body=AcmeComponentBody ';'?)
			)
		)
	)
;

AcmeComponentDeclaration:
	'component' name=ID (':' declared+=[ComponentOrGenericRef] (',' declared+=[ComponentOrGenericRef])*)?
	(
		';' |
		'=' (
				(body=AcmeComponentBody ';'?) |
				(
					'new' instantiated+=[ComponentOrGenericRef] (',' instantiated+=[ComponentOrGenericRef])* 
					(
						';' |
						'extended' 'with' body=AcmeComponentBody ';'? 
					)
				)
			)
	)
;

ComponentOrGenericRef:
	AcmeElementTypeDeclaration | AcmeComponentTypeDeclaration
;	

AnyTypeRef:
	AcmeElementTypeDeclaration | AcmeComponentTypeDeclaration | AcmeConnectorTypeDeclaration | AcmePortTypeDeclaration | AcmeRoleTypeDeclaration | AcmeGroupTypeDeclaration
;

AcmeComponentBody:
	{AcmeComponentBody} '{'
	(
		ports+=AcmePortDeclaration |
		properties+=AcmePropertyDeclaration |
		rules+=DesignRule |
		representations+=AcmeRepresentationDeclaration
	)*
	'}'
;

AcmeConnectorTypeDeclaration:
	(visibility+=Visibility)? (extensibility+=Extensability)? => 'connector' 'type' name=ID 
	(
		';' |
		(
			('=' body=AcmeConnectorBody ) | 
			('extends' refs+=[AcmeConnectorTypeDeclaration] (',' refs+=[AcmeConnectorTypeDeclaration])* 
				(';' | 'with' body=AcmeConnectorBody ';'?)
			)
		)
	)
;

AcmeConnectorDeclaration:
	'connector' name=ID (':' declared+=[ConnectorOrGenericRef] (',' declared+=[ConnectorOrGenericRef])*)?
	(
		';' |
		'=' ((body=AcmeConnectorBody ';'?) |
			(
				'new' instantiated+=[ConnectorOrGenericRef] (',' instantiated+=[ConnectorOrGenericRef])* 
				(
					';' |
					'extended' 'with' body=AcmeConnectorBody ';'? 
				)
			)
		)
	)
;

ConnectorOrGenericRef:
	(AcmeElementTypeDeclaration|AcmeConnectorTypeDeclaration)
;	

AcmeConnectorBody:
	{AcmeConnectorBody} '{'
	(
		roles+=AcmeRoleDeclaration |
		properties+=AcmePropertyDeclaration |
		rules+=DesignRule |
		representations+=AcmeRepresentationDeclaration
	)*
	'}'
;


AcmeRepresentationDeclaration:
	'representation' /*(name=ID '=')?
	'{'
		system=AcmeSystemDeclaration bindings=AcmeBindingsMapDeclaration?
	'}' */';'?
;

AcmeBindingsMapDeclaration:
	{AcmeBindingsMapDeclaration} 'bindings' '{' bindings+=AcmeBindingDeclaration*'}' ';'
;

AcmeBindingDeclaration:
	outer=[PortOrRoleRef] 'to' inner=[PortOrRoleRef]
	('{' properties+=AcmePropertyDeclaration* '}')? ';'
;

PortOrRoleRef:
	(AcmePortDeclaration | AcmeRoleDeclaration)
;

AcmeAttachmentDeclaration:
	'attachment' port=[AcmePortDeclaration|QualifiedIdentifier] 'to' role=[AcmeRoleDeclaration|QualifiedIdentifier] ';'
;





AcmePropertyDeclaration:
	'property' name=ID
	(':' type=AcmePropertyTypeRef)?
	(
		'=' val=AcmePropertyValueDeclaration |
		'U=' val=AcmePropertyValueDeclaration
	)?
	meta=AcmePropertyBlock? ';'
;

AcmePropertyValueDeclaration:
	value=IntegerLiteral|
	value=FloatLiteral |
	value=StringLiteral |
	value=BooleanLiteral |
	value=AcmePropertySet |
	value=AcmePropertyRecord |
	value=AcmePropertySequence |
	value=EnumIdentifier
;

BooleanLiteral:
	isTrue?='true' | {BooleanLiteral} 'false'
;

IntegerLiteral:
	value=INT
;

FloatLiteral:
	value=FLOAT
;

terminal fragment DIGIT: ('0'..'9');
terminal FLOAT:
	DIGIT+ '.' +DIGIT+
;

EnumIdentifier:
	value=ID
;

AcmePropertyElement:
	name=QualifiedIdentifier |
	compound=AcmePropertyCompoundElement
;

AcmePropertyCompoundElement:
	value=AcmePropertySet |
	value=AcmePropertyRecord |
	value=AcmePropertySequence
;

AcmePropertySet:
	{AcmePropertySet} '{' (values+=AcmePropertyValueDeclaration (',' values+=AcmePropertyValueDeclaration)*)? '}'
;

AcmePropertySequence:
	 {AcmePropertySequence} '<' (values+=AcmePropertyValueDeclaration (',' values+=AcmePropertyValueDeclaration)*)? '>'
;

AcmePropertyRecordEntry:
	name=ID (':' ref=AcmePropertyTypeRef)? '=' value=AcmePropertyValueDeclaration
;

AcmePropertyRecord:
	{AcmePropertyRecord} '[' (fields+=AcmePropertyRecordEntry (';' fields+=AcmePropertyRecordEntry)* ';')? ']'
;

AcmePropertyTypeRecord:
	{AcmePropertyTypeRecord} 'record' '[' fields+=AcmePropertyRecordFieldDescription* ']'
;

AcmePropertyTypeSet:
	{AcmePropertyTypeSet} 'set' '{' type=AcmePropertyTypeRef? '}'
;

AcmePropertyTypeSequence:
	{AcmePropertyTypeSequence} ('seq' | 'sequence') '<' type=AcmePropertyTypeRef? '>'
;

AcmePropertyTypeEnum:
	'enum' '{' values+=ID (',' values+=ID)* '}'
;

AcmePropertyRecordFieldDescription:
	name=ID ':' type=AcmePropertyTypeRef ';'
;

AcmePropertyTypeRef:
	structure=AcmePropertyTypeStructure |
	ref=[AcmePropertyTypeDeclaration]
;


enum PrimitivePropertyType:
	NOT_PRIMITIVE="$__NotPrimitive__$" | 
	INT='int' | FLOAT='float' | ANY='any' | DOUBLE='double' | STRING='string' | BOOLEAN='boolean'
;

AcmePropertyTypeStructure:
	primitive=PrimitivePropertyType |
	structure=AcmePropertyTypeRecord |
	structure=AcmePropertyTypeSet |
	structure=AcmePropertyTypeSequence |
	num=AcmePropertyTypeEnum
;

AcmePropertyTypeDeclaration:
	'property' 'type' name=ID 
	(
		';' |
		(
			'=' type=AcmePropertyTypeRef ';'
		)
	)
;

AcmePropertyBlockEntry:
	name=ID (':' type=AcmePropertyTypeRef)? 
	(
		ass=('=' | 'U=') val=AcmePropertyValueDeclaration 
	)? ';'
;

AcmePropertyBlock:
	{AcmePropertyBlock} '<<' properties+=AcmePropertyBlockEntry* '>>'
;

DesignRule:
	('rule' name=ID '=')?
	kind=('invariant' | 'hueristic') expr=booleanExpression meta=AcmePropertyBlock? ';'
;

DesignAnalysisDeclaration:
	('design'? 'analysis' name=ID 
	'(' (params+=FormalParam (',' params+=FormalParam)*)? ')'
	':' type=AcmeTypeRef '=' expr=assignmentExpression properties=AcmePropertyBlock? ';') |
	('external' 'design'? 'analysis' name=ID 
	'(' (params+=FormalParam (',' params+=FormalParam)*)? ')'
	':' type=AcmeTypeRef '=' class=QualifiedIdentifier	)
;

FormalParam:
	name=ID ':' type=AcmeTypeRef
;

AcmeTypeRef:
	primitive=PrimitivePropertyType |
	structure=AcmePropertyTypeRecord |
	structure=AcmePropertyTypeSet |
	structure=AcmePropertyTypeSequence |
	num=AcmePropertyTypeEnum |
	ref=[ElementTypeRef]
	
;

ElementTypeRef:
	AcmeComponentTypeDeclaration |
	AcmeConnectorTypeDeclaration |
	AcmePortTypeDeclaration |
	AcmeRoleTypeDeclaration
;

//expression 
//  : assignmentExpr=assignmentExpression
//  ;

enum AssignKind:
	ASSIGN = '=' | ADD_ASSIGN = '+=' | MINUS_ASSIGN='-=' |
	MULT_ASSIGN = '*=' | DIV_ASSIGN="/=" | REM_ASSIGN='%='
;


assignmentExpression returns Expr
  : booleanExpr= booleanExpression
    (assign=AssignKind
      assignmentExpr=assignmentExpression)?
  ;

booleanExpression returns Expr
  : impliesExpression
  | quantifiedExpression
  ;

impliesExpression returns Expr
  : iffExpression ('->' impliesExpr=impliesExpression)?
  ;

iffExpression returns Expr
  : logicalOrExpression ('<->' iffExpr=iffExpression)?
  ;

logicalOrExpression returns Expr
  : logicalAndExpression (('or' | '||') logicalOrExpr=logicalOrExpression)?
  ;

logicalAndExpression returns Expr
  : equalityExpression ( ('and' | '&&') logicalAndExpr=logicalAndExpression)?
  ;
  


equalityExpression returns Expr
  : relationalExpression (eq=('!=' | '==') eqExpr=equalityExpression)?
  ;

relationalExpression returns Expr
  : additiveExpression (rel=('<' | '<=' | '>' | '>=') relExpr=relationalExpression)?
  ;

additiveExpression returns Expr
  : multiplicativeExpression (add=('+' | '-') addExpr=additiveExpression)?
  ;

multiplicativeExpression returns Expr
  : unaryExpression (mult=("*" | "/" | "%") multExpr=multiplicativeExpression)?
  ;

unaryExpression returns Expr
  : unary=('++' | '--' | '-' | '+')? primaryExpr=nonunaryExpression post=('++' | '--')?
//  | DECR unaryExpression
//  | MINUS unaryExpression
//  | PLUS unaryExpression
//  | LOGICAL_NOT unaryExpression
//  | primaryExpression
  ;

nonunaryExpression:
	('!' booleanExpression) |
	primaryExpression
;

primaryExpression returns Expr
  : idExpression
  | postIdExpression
  | setExpression
  | pathExpression
  | '(' assignmentExpression ')'
  ;

idExpression returns Expr
  : methodCall
  | {idExpression} QualifiedIdentifier
  | {idExpression} INT
  | {idExpression} FLOAT
  | {idExpression}  STRING
  | {idExpression} "'" ANY_OTHER "'"
  | {idExpression} 'true'
  | {idExpression} 'false'
  | {idExpression} 'TNULL'
  ;

postIdExpression returns Expr
  : id=ID "'"
  ;

methodCall returns Expr
  : id=QualifiedIdentifier '(' (expressions+=assignmentExpression (',' expressions+=assignmentExpression)*)? ')'
  ;

params
  : params+=param (',' params+=param)*
  ;

param
  : ID declares=(":" | ':!') dataType=dataType
  ;

quantifiedExpression
  : 'forall' ('distinct')?
    params+=param (',' params+=param)?
    'in' range=(setExpression | idExpression)
    '|' expr=assignmentExpression
  | 'exists' ('unique')?
    params+=param (',' params+=param)?
    'in' range=(setExpression | idExpression)
    "|" expr=assignmentExpression
  | '{'? 'select' 
    params+=param (',' params+=param)? 
    'in' range=(setExpression | idExpression) 
    '|' expr=assignmentExpression '}'?
  ;




setExpression
  : literalSet
  ;

pathExpression
  : '/' (id=QualifiedIdentifier | call=methodCall)( declares=(':' | ':!') QualifiedIdentifier)? ('[' selector=assignmentExpression ']')?
    continuation=pathExpressionContinuation?
  ;

pathExpressionContinuation
  : {pathExpressionContinuation} '/' path?='...'? ID ( declares=(':' | ':!') QualifiedIdentifier)? ('[' expression=assignmentExpression ']')? continue?=pathExpressionContinuation?
  ;

literalSet
  : lb='{' 
      (expr+=assignmentExpression (',' expr+=assignmentExpression)*)?
    '}'
  ;

dataType

  : {dataType} 'object'
  | {dataType} 'int'
  | {dataType} 'float'
  | {dataType} 'boolean' 
  | {dataType} 'bool'
  | {dataType} 'char'
  | {dataType} 'string'
  | {dataType} 'set' ('{' dataType=dataType '}')?
  | ('seq' | 'sequence') ('{' dataType=dataType '}')
  | {dataType} 'record' ('[' (id+=ID (',' id+=ID)* ':' type+=dataType ';')* ']')?
  | {dataType} 'enum' ('{' (ID (',' ID)*)? '}')?
  | i=QualifiedIdentifier 
  ;

//booleanExpression returns Expression:
//	expr+=ImpliesExpression //|
//	expr+=QuantifiedExpression
//;
//
//QuantifiedExpression:
//	(
//		ops+='forall' ops+='distinct'? |
//		ops+='exists' ops+='unique'?	
//	)  
//	vars=QuantifierDeclaration
//	'|'
//	expr=booleanExpression
//;
//
//QuantifierDeclaration:
//	id+=ID (',' id+=ID)*
//	((':' | ':!') ref=AcmeTypeRef)? 'in' 
//	(range=SetExpression|range=IdExpression)
//;
//
//ImpliesExpression returns Expression:
//	left=IffExpression (=>op+='implies' right+=ImpliesExpression)?
//;
//
//IffExpression returns Expression:
//	left=LogicalOrExpression (=>op+='<->' right+=IffExpression)?
//;
//
//LogicalOrExpression returns Expression:
//	left=LogicalAndExpression (=>op+=('or' | '||') right+=LogicalAndExpression)*
//;
//
//LogicalAndExpression returns Expression:
//	left=EqualityExpression (=>op+=('and' | '&&') right+=EqualityExpression)*
//;
//
//EqualityExpression returns Expression:
//	left=RelationalExpression (=>op+=('!=' | '==') right+=RelationalExpression)
//;
//
//RelationalExpression returns Expression:
//	left=AdditiveExpression (=>op+=('<' | '>' | '<=' | '>=')right+=AdditiveExpression) 
//;
//
//AdditiveExpression returns Expression:
//	left=MultiplicativeExpression (=>op+=('+' | '-') right+=MultiplicativeExpression)
//;
//
//MultiplicativeExpression returns Expression:
//	left=UnaryExpression (=>op+=('*' | '/' | '%') right+=UnaryExpression)*
//;
//
//UnaryExpression returns Expression:
//	op+=('++' | '--' | '-' | '+' | '!')? left=PrimaryExpression op+=('++' | '--')?
//	
////	op+='++' left=UnaryExpression |
////	op+='--' left=UnaryExpression |
////	op+='-' left=UnaryExpression |
////	op+='+' left=UnaryExpression |
////	left=UnaryExpressionNotPlusMinus
//;
//
//UnaryExpressionNotPlusMinus returns Expression:
//	op+='!' left=booleanExpression |
//	left=PrimaryExpression (op+=('++' | '--'))?
//;
//
//PrimaryExpression:
//	IdExpression |
//	PostIdExpression |
//	SetExpression |
//	PathExpression |
//	'(' booleanExpression ')'
//;
//
//IdExpression:
//	expr=NonLiteralIdExpression |
//	{IdExpression} INT |
//	{IdExpression} FLOAT |
//	{IdExpression} STRING |
//	{IdExpression} "'" ANY_OTHER "'" |
//	{IdExpression} 'true' |
//	{IdExpression} 'false'
//;
//
//
//NonLiteralIdExpression:
//	id=QuantifiedIdentifier |
//	expr=MethodCall
//;
//
//PostIdExpression:
//	id=ID "'"
//;
//
//MethodCall:
//	id=QuantifiedIdentifier '('  params=ActualParams? ')'
//;
//
//ActualParams:
//	params+=booleanExpression //(',' params+=DesignRuleExpression)*
//;
//
//SetExpression:
//	set=LiteralSet
//;
//
//PathExpression:
//	'/' start=NonLiteralIdExpression ((':' | '!:') ID)? ('[' filter=booleanExpression ']') cont=PathExpressionContinuation?
//;
//
//PathExpressionContinuation:
//	'/' '...'? id=ID ((':' | '!:') ID)? ('[' filter=booleanExpression ']') cont=PathExpressionContinuation?
//;
//
//LiteralSet:
//	{LiteralSet} '{' (values+=booleanExpression (',' values+=booleanExpression)*)? '}'
//;



//ImpliesExpression returns Expression:
//	expr+=IffExpression (ops+='->' expr+=IffExpression)*
//;
//
//IffExpression returns Expression:
//	expr+=AndExpression (ops+='<->' expr+=AndExpression)*
//;
//
//AndExpression returns Expression:
//	expr+=NegateExpression (ops+=('and' | '&&') expr+=NegateExpression)*
//;
//
//NegateExpression returns Expression:
//	ops+='!' expr+=NegateExpression |
//	expr+=EqualityExpression
//;
//
//EqualityExpression returns Expression:
//	expr+=RelationalExpression ( ops+=('==' | '!=') expr+=RelationalExpression)*
//;
//
//RelationalExpression returns Expression:
//	expr+=AdditiveExpression (ops+=('>' | '<' | '<=' | '>=') expr+=AdditiveExpression)
//;
//
//AdditiveExpression returns Expression:
//	expr+=MultiplicativeExpression (ops+=('+' | '-') expr+=MultiplicativeExpression)
//;
//
//MultiplicativeExpression returns Expression:
//	expr+=NegativeExpression (ops+=('*'|'/'|'%'|'^') expr+=NegativeExpression) 
//;
//
//NegativeExpression returns Expression:
//	ops+='-' expr+=NegativeExpression |
//	expr+=PrimitiveExpression
//;
//
//PrimitiveExpression:
//	expr=LiteralConstant |
//	ref=Reference |
//	expr=ParentheticalExpression |
//	expr=SetExpression |
//	expr=LiteralSequence |
//	expr=LiteralRecord |
//	expr=QuantifiedExpression |
//	expr=SequenceExpression
//;
//
//ParentheticalExpression:
//	'(' expr=DesignRuleExpression ')'
//;
//
//Reference:
//	ID ('.' ID)* ('.' ('components' | 'connectors' | 'ports' | 'roles' | 'groups' | 'members' | 'properties' | 'representations' | 'attachedPorts' | 'attachedRoles'))?
//;
//
//ActualParams:
//	{ActualParams} '(' (params+=DesignRuleExpression (',' params+=DesignRuleExpression)*)? ')'
//;
//
//LiteralConstant:
//	{LiteralConstant} INT | FLOAT | {LiteralConstant} STRING | {LiteralConstant} 'true' | {LiteralConstant} 'false' | 
//	{LiteralConstant} 'component' | {LiteralConstant} 'group' | {LiteralConstant} 'port' | {LiteralConstant} 'connector' | {LiteralConstant} 'role' | {LiteralConstant} 'system' | {LiteralConstant} 'element' | {LiteralConstant} 'property' |
//	{LiteralConstant} 'int' | {LiteralConstant} 'float' | {LiteralConstant} 'double' | {LiteralConstant} 'string' | {LiteralConstant} 'boolean' | {LiteralConstant} 'enum' | {LiteralConstant} 'set' | {LiteralConstant} 'seq' | {LiteralConstant} 'record'
//;
//
//QuantifiedExpression:
//	(
//		(op='forall' distinct?='distinct'?) |
//		(op='exists' unique?='unique'?)
//	)
//	vars+=VariableDeclaration (',' vars+=VariableDeclaration)* '|' expr=DesignRuleExpression
//;
//
//VariableDeclaration:
//	ids+=ID (',' ids+=ID)*
//	(op=(':' | ':!') type=AcmeTypeRef )?
//	'in' (expr=SetExpression | ref=Reference)
//;
//
//
//SequenceExpression:
//	'<' expr=PathExpression '>'
//;
//
//SetExpression:
//	set=LiteralSet |
//	set=SetConstructor |
//	set=PathExpression
//;
//
//PathExpression:
//	'/' ref=Reference (op=(':' | ':!') type=AcmeTypeRef)?
//	('[' expr=DesignRuleExpression ']')? 
//	('/' cont=PathExpressionContinuation)?
//;
//
//PathExpressionContinuation:
//	(
//		(
//			set=Reference (op=(':' | ':!') type=AcmeTypeRef)?
//			('[' expr=DesignRuleExpression ']')?
//			('/' cont+=PathExpressionContinuation)*
//		)
//		|
//		'...' ref=Reference
//	)
//;
//
//LiteralSet:
//	{LiteralSet} '{' (expr+=LitOrRef (',' expr+=LitOrRef)*)? '}'
//;
//
//LiteralSequence:
//	{LiteralSequence} '<' (expr+=LitOrRef (',' expr+=LitOrRef)*)? '>'
//;
//
//LitOrRef:
//	lit=LiteralConstant |
//	ref=Reference
//;
//
//LiteralRecordEntry:
//	name=ID (':' type=AcmePropertyTypeRef)? '=' val=LiteralConstant
//;
//
//LiteralRecord:
//	'['
//	(
//		fields+=LiteralRecordEntry
//		(';' fields+=LiteralRecordEntry)*
//		';'?
//	)
//	']'
//;
//
//SetConstructor:
//	op=('select'|'collect') var=VariableDeclaration '|' expr=DesignRuleExpression
//;



