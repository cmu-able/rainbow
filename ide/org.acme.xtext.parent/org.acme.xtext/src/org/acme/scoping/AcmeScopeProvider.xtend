/*
 * generated by Xtext 2.19.0
 */
package org.acme.scoping

import java.util.ArrayList
import org.acme.acme.AcmeAttachmentDeclaration
import org.acme.acme.AcmeComponentDeclaration
import org.acme.acme.AcmeComponentTypeDeclaration
import org.acme.acme.AcmeConnectorDeclaration
import org.acme.acme.AcmeConnectorTypeDeclaration
import org.acme.acme.AcmeElementTypeDeclaration
import org.acme.acme.AcmeFamilyDeclaration
import org.acme.acme.AcmeGroupDeclaration
import org.acme.acme.AcmeGroupTypeDeclaration
import org.acme.acme.AcmePackage
import org.acme.acme.AcmePortDeclaration
import org.acme.acme.AcmePortTypeDeclaration
import org.acme.acme.AcmePropertyDeclaration
import org.acme.acme.AcmePropertyTypeDeclaration
import org.acme.acme.AcmeRoleDeclaration
import org.acme.acme.AcmeRoleTypeDeclaration
import org.acme.acme.AcmeSystemDeclaration
import org.eclipse.emf.ecore.EAttribute
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.resource.EObjectDescription
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.SimpleScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AcmeScopeProvider extends AbstractAcmeScopeProvider {

	def getNameWithElementTypes(EObject target, EAttribute field) {
		try {
			val eGet = target.eGet(field)
			eGet as String

		} catch (IllegalArgumentException e) {
			target.eGet(AcmePackage.Literals.ACME_ELEMENT_TYPE__NAME) as String
		}
	}

	def getScope(AcmeAttachmentDeclaration attachment, EReference reference) {
		super.getScope(attachment, reference)
	}

	override getScope(EObject context, EReference reference) {
		switch context {
			AcmePortTypeDeclaration:
				addFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.portTypes + f.body.elementTypes],
					[EObject p|getNameWithElementTypes(p, AcmePackage.Literals.ACME_ELEMENT_TYPE__NAME)]
				)
			AcmeRoleTypeDeclaration:
				addFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.roleTypes + f.body.elementTypes],
					[EObject r|getNameWithElementTypes(r, AcmePackage.Literals.ACME_ELEMENT_TYPE__NAME)]
				)
			AcmeComponentTypeDeclaration:
				addFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.componentTypes + f.body.elementTypes],
					[EObject c|getNameWithElementTypes(c, AcmePackage.Literals.ACME_ELEMENT_TYPE__NAME)]
				)
			AcmeConnectorTypeDeclaration:
				addFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.connectorTypes + f.body.elementTypes],
					[EObject c|getNameWithElementTypes(c, AcmePackage.Literals.ACME_ELEMENT_TYPE__NAME)]
				)
			AcmeGroupTypeDeclaration:
				addFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.groupTypes + f.body.elementTypes],
					[EObject c|getNameWithElementTypes(c, AcmePackage.Literals.ACME_ELEMENT_TYPE__NAME)]
				)
			AcmeElementTypeDeclaration:
				addFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.elementTypes],
					[EObject c|getNameWithElementTypes(c, AcmePackage.Literals.ACME_ELEMENT_TYPE__NAME)]
				)
			AcmePropertyTypeDeclaration:
				addFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.propertyTypes],
					[EObject c|getNameWithElementTypes(c, AcmePackage.Literals.ACME_PROPERTY_TYPE_DECLARATION__NAME)]
				)
			AcmePortDeclaration:
				addSystemFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.portTypes + f.body.elementTypes],
					[EObject e|getNameWithElementTypes(e, AcmePackage.Literals.ACME_ELEMENT_TYPE__NAME)]
				)
			AcmeRoleDeclaration:
				addSystemFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.roleTypes + f.body.elementTypes],
					[EObject e|getNameWithElementTypes(e, AcmePackage.Literals.ACME_ELEMENT_TYPE__NAME)]
				)
			AcmeComponentDeclaration:
				addSystemFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.componentTypes + f.body.elementTypes],
					[EObject e|getNameWithElementTypes(e, AcmePackage.Literals.ACME_ELEMENT_TYPE__NAME)]
				)
			AcmeConnectorDeclaration:
				addSystemFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.connectorTypes + f.body.elementTypes],
					[EObject e|getNameWithElementTypes(e, AcmePackage.Literals.ACME_ELEMENT_TYPE__NAME)]
				)
			AcmeGroupDeclaration:
				addSystemFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.groupTypes + f.body.elementTypes],
					[EObject e|getNameWithElementTypes(e, AcmePackage.Literals.ACME_ELEMENT_TYPE__NAME)]
				)
			AcmePropertyDeclaration:
				addSystemFamiliesToScope(
					context,
					super.getScope(context, reference),
					[AcmeFamilyDeclaration f|f.body.propertyTypes],
					[EObject e|getNameWithElementTypes(e, AcmePackage.Literals.ACME_PROPERTY_DECLARATION__NAME)]
				)
			AcmeAttachmentDeclaration:
				addAllPortAndRolesFromFamiliesToScope(context, super.getScope(context, reference))
			default:
				super.getScope(context, reference)
		}
	}

	def addAllPortAndRolesFromFamiliesToScope(AcmeAttachmentDeclaration declaration, IScope scope) {
		val ArrayList<AcmeComponentDeclaration> components = newArrayList;
		val ArrayList<AcmeConnectorDeclaration> connectors = newArrayList;
		val ArrayList<AcmeFamilyDeclaration> families = newArrayList()

		val containingSystem = EcoreUtil2.getContainerOfType(declaration, AcmeSystemDeclaration)
		if (containingSystem !== null) {
			components.addAll(containingSystem.body.components)
			connectors.addAll(containingSystem.body.connectors)
			for (family : containingSystem.declared + containingSystem.instantiated) {
				if(!families.contains(family)) families.add(family)
				collectSuperFamilies(family, families)
			}
		}
		else {
			val containingFamily = EcoreUtil2.getContainerOfType(declaration, AcmeFamilyDeclaration)
			components.addAll (containingFamily.body.components)
			connectors.addAll(containingFamily.body.connectors)
			collectSuperFamilies(containingFamily, families);
		}

		for (family : families) {
			components.addAll(family.body.components)
			connectors.addAll(family.body.connectors)
		}
		val result = newArrayList
		for (component : components) {
			for (type : component.instantiated) {
				if (type instanceof AcmeComponentTypeDeclaration) {
					val ct = type as AcmeComponentTypeDeclaration
					for (port : ct.body.ports) {
						result.add(EObjectDescription.create(QualifiedName.create(component.name, port.name), port))
					}
				}
			}
		}
		for (connector : connectors) {
			for (type : connector.instantiated) {
				if (type instanceof AcmeConnectorTypeDeclaration) {
					val ct = type as AcmeConnectorTypeDeclaration
					for (role : ct.body.roles) { 
						result.add(EObjectDescription.create(QualifiedName.create(connector.name, role.name), role))
					}
				}
			}
		}
		return new SimpleScope(scope, result)

	}

	def addSystemFamiliesToScope(EObject declaration, IScope scope,
		(AcmeFamilyDeclaration)=>Iterable<? extends EObject> getCandidates, (EObject)=>String getName) {
		val containingSystem = EcoreUtil2.getContainerOfType(declaration, AcmeSystemDeclaration)
		val ArrayList<AcmeFamilyDeclaration> families = newArrayList()
		if (containingSystem !== null) {
			for (family : containingSystem.declared + containingSystem.instantiated) {
				if(!families.contains(family)) families.add(family)
				collectSuperFamilies(family, families)
			}
			addNamesToScope(families, getCandidates, getName, scope);
		} else {
			addFamiliesToScope(declaration, scope, getCandidates, getName)
		}
	}

	def addFamiliesToScope(EObject declaration, IScope scope,
		(AcmeFamilyDeclaration)=>Iterable<? extends EObject> getCandidates, (EObject)=>String getName) {
		val containingFamily = EcoreUtil2.getContainerOfType(declaration, AcmeFamilyDeclaration)
		if(containingFamily === null) return scope;
		val ArrayList<AcmeFamilyDeclaration> families = newArrayList()
		collectSuperFamilies(containingFamily, families)

		addNamesToScope(families, getCandidates, getName, scope)
	}

	protected def SimpleScope addNamesToScope(ArrayList<AcmeFamilyDeclaration> families,
		(AcmeFamilyDeclaration)=>Iterable<? extends EObject> getCandidates, (EObject)=>String getName, IScope scope) {
		val result = newArrayList

		for (f : families) {
			for (eligible : getCandidates.apply(f)) {
				result.add(EObjectDescription.create(QualifiedName.create(getName.apply(eligible)), eligible))
			}
		}
		return new SimpleScope(scope, result)
	}

	def void collectSuperFamilies(AcmeFamilyDeclaration fam, ArrayList<AcmeFamilyDeclaration> objects) {
		for (st : fam.refs) {
			if (!objects.contains(st)) {
				objects.add(st)
			}
			collectSuperFamilies(st, objects)
		}

	}
	
	

}
