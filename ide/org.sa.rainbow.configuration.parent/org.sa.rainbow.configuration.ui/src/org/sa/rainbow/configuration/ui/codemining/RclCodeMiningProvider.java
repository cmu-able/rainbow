/*
 * generated by Xtext 2.20.0
 */
package org.sa.rainbow.configuration.ui.codemining;
/*
Copyright 2020 Carnegie Mellon University

Permission is hereby granted, free of charge, to any person obtaining a copy of this 
software and associated documentation files (the "Software"), to deal in the Software 
without restriction, including without limitation the rights to use, copy, modify, merge,
 publish, distribute, sublicense, and/or sell copies of the Software, and to permit 
 persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.
 */
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CompletableFuture;

import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.jface.text.BadLocationException;
import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.text.ITextViewer;
import org.eclipse.jface.text.Position;
import org.eclipse.jface.text.codemining.ICodeMining;
import org.eclipse.jface.text.codemining.ICodeMiningProvider;
import org.eclipse.jface.text.codemining.LineContentCodeMining;
import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Font;
import org.eclipse.swt.graphics.FontData;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.Point;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.impl.LeafNode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.ui.codemining.AbstractXtextCodeMiningProvider;
import org.eclipse.xtext.util.CancelIndicator;
import org.eclipse.xtext.util.IAcceptor;
import org.sa.rainbow.configuration.XtendUtils;
import org.sa.rainbow.configuration.rcl.DeclaredProperty;
import org.sa.rainbow.configuration.rcl.PropertyReference;
import org.sa.rainbow.configuration.rcl.RichStringPart;
import org.sa.rainbow.configuration.services.RclGrammarAccess;
import org.sa.rainbow.configuration.ui.FontManager;

import com.google.inject.Inject;

@SuppressWarnings("restriction")
public class RclCodeMiningProvider extends AbstractXtextCodeMiningProvider {

	class SmallLineContentCodeMining extends LineContentCodeMining {
		
		private String m_content;

		public SmallLineContentCodeMining(int beforeCharacter, String content) {
			super(new Position(beforeCharacter, 1), RclCodeMiningProvider.this);
			m_content = content;
			
		}
		
		@Override
		protected CompletableFuture<Void> doResolve(ITextViewer viewer, IProgressMonitor monitor) {
			return CompletableFuture.runAsync(() -> {
				super.setLabel(m_content);
			});
		}
				
		@Override
		public Point draw(GC gc, StyledText textWidget, Color color, int x, int y) {
			String title = getLabel() != null ? getLabel() : "";
			Font widgetFont = textWidget.getFont();
			Font smallFont = FontManager.getFont(widgetFont.getFontData()[0].getName(), widgetFont.getFontData()[0].getHeight()-2, widgetFont.getFontData()[0].getStyle() | SWT.ITALIC);
			gc.setFont(smallFont);
			Point stringExtent = gc.stringExtent(title);
			gc.drawText(title, x, y);
			gc.drawRectangle(x, y, stringExtent.x, stringExtent.y);
			gc.setFont(widgetFont);
			return stringExtent;
		}
		
	}
	
	
	RclGrammarAccess grammar;

	final Keyword RG_KW;
	
	
	
	// Using constructor injection to allow initializaing RG_KW.
	@Inject
	public RclCodeMiningProvider(RclGrammarAccess grammar) {
		this.grammar = grammar;
		RG_KW = grammar.getPropertyReferenceAccess()
				.getRightPointingDoubleAngleQuotationMarkRightPointingDoubleAngleQuotationMarkKeyword_2();
	}
	
	@Override
	protected void createCodeMinings(IDocument document, XtextResource resource, CancelIndicator indicator,
			IAcceptor<? super ICodeMining> acceptor) throws BadLocationException {
		if (resource.getContents().isEmpty())
			return;

		minePropertyReferences(resource, acceptor);
		mineStringReferences(resource, acceptor);

		// TODO: implement me
		// use acceptor.accept(super.createNewLineHeaderCodeMining(...)) to add a new
		// code mining to the final list

		// example:
		// acceptor.accept(createNewLineHeaderCodeMining(1, document, "Header
		// annotation"));
	}

	private void mineStringReferences(XtextResource resource, IAcceptor<? super ICodeMining> acceptor) {
		List<RichStringPart> allReferences = EcoreUtil2.eAllOfType(resource.getContents().get(0), RichStringPart.class);
		for (RichStringPart part : allReferences) {
			if (XtendUtils.isSimpleDeclaredProperty(part.getReferable())) {
				ICompositeNode node = NodeModelUtils.findActualNodeFor(part);
				String annotationText = "=" + XtendUtils.valueOfSimpleDeclaredProperty(part.getReferable());
//				acceptor.accept(createNewLineContentCodeMining(node.getTotalEndOffset(), annotationText));
				acceptor.accept (new SmallLineContentCodeMining(node.getTotalEndOffset(), annotationText));
//				for (Iterator<INode> it = node.getAsTreeIterable().iterator(); it.hasNext();) {
//					INode child = it.next();
//					if (!it.hasNext()) {
////						String annotationText = " = " + XtendUtils.valueOfSimpleDeclaredProperty(part.getReferable());
//						acceptor.accept(createNewLineContentCodeMining(node.getTotalEndOffset(), annotationText));
//						break;
//					}
//				}
			}
		}
	}

	protected void minePropertyReferences(XtextResource resource, IAcceptor<? super ICodeMining> acceptor) {
		List<PropertyReference> allReferences = EcoreUtil2.eAllOfType(resource.getContents().get(0),
				PropertyReference.class);

		for (PropertyReference ref : allReferences) {
			if (ref.getReferable() instanceof DeclaredProperty
					&& XtendUtils.isSimpleDeclaredProperty((DeclaredProperty) ref.getReferable())) {
				ICompositeNode node = NodeModelUtils.findActualNodeFor(ref);
				for (Iterator<INode> it = node.getAsTreeIterable().iterator(); it.hasNext();) {
					INode child = it.next();
					if (RG_KW.equals(child.getGrammarElement())) {
						String annotationText = "=" + XtendUtils
								.valueOfSimpleDeclaredProperty((DeclaredProperty) ref.getReferable());
						acceptor.accept (new SmallLineContentCodeMining(child.getTotalOffset(), annotationText));

//						acceptor.accept(createNewLineContentCodeMining(child.getTotalOffset(), annotationText));
					}
				}
			}
		}
	}
}
