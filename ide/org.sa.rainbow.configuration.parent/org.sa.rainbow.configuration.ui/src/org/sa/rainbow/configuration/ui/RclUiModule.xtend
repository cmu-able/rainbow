/*
 * generated by Xtext 2.19.0
 */
package org.sa.rainbow.configuration.ui
/*
Copyright 2020 Carnegie Mellon University

Permission is hereby granted, free of charge, to any person obtaining a copy of this 
software and associated documentation files (the "Software"), to deal in the Software 
without restriction, including without limitation the rights to use, copy, modify, merge,
 publish, distribute, sublicense, and/or sell copies of the Software, and to permit 
 persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.
 */

import com.google.inject.Binder
import com.google.inject.name.Names
import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor
import org.eclipse.xtext.common.types.access.IJvmTypeProvider
import org.eclipse.xtext.common.types.access.jdt.JdtTypeProviderFactory
import org.eclipse.xtext.common.types.xtext.AbstractTypeScopeProvider
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider
import org.eclipse.xtext.common.types.xtext.ui.JdtBasedSimpleTypeScopeProvider
import org.eclipse.xtext.ide.editor.bracketmatching.IBracePairProvider
import org.eclipse.xtext.ide.editor.syntaxcoloring.DefaultSemanticHighlightingCalculator
import org.eclipse.xtext.service.SingletonBinding
import org.eclipse.xtext.ui.editor.hyperlinking.HyperlinkHelper
import org.eclipse.xtext.ui.editor.model.TerminalsTokenTypeToPartitionMapper
import org.eclipse.xtext.ui.editor.syntaxcoloring.DefaultHighlightingConfiguration
import org.sa.rainbow.configuration.ConfigAttributeConstants
import org.sa.rainbow.configuration.ui.contentassist.RainbowJdtTypesProposalProvider
import org.sa.rainbow.configuration.ui.contentassist.RainbowTemplateProposalProvider

/**
 * Use this class to register components to be used within the Eclipse IDE.
 */
@FinalFieldsConstructor
class RclUiModule extends AbstractRclUiModule {
	override bindIHyperlinkDetector() {
		return RclHyperlinkDetector
	}
	
	
	override bindITemplateProposalProvider() {
		return RainbowTemplateProposalProvider;
	}
		
	def configureJvmTypeProvider(Binder binder) {
		binder.requestStaticInjection(ConfigAttributeConstants)
		binder.bind(AbstractTypeScopeProvider).annotatedWith(Names.named("jvmtypes")).to(JdtBasedSimpleTypeScopeProvider)
		binder.bind(IJvmTypeProvider.Factory).annotatedWith(Names.named("jvmtypes")).to(JdtTypeProviderFactory)
		binder.bind(ITypesProposalProvider).annotatedWith(Names.named("jvmtypes")).to(RainbowJdtTypesProposalProvider)
		
	}
	
	override configure(Binder binder) {
		super.configure(binder)
		binder.bind(DefaultSemanticHighlightingCalculator).to(RclHighlighter)
		binder.bind(DefaultHighlightingConfiguration).to(RclHighlightingConfiguration)
		binder.bind(HyperlinkHelper).to(RclHyperlinkHelper)
	}
	
	@SingletonBinding override Class<? extends IBracePairProvider> bindIBracePairProvider() {
		return RainbowBracePairsProvider
	}
	
	override bindAbstractEditStrategyProvider() {
		return AutoEditStrategyProvider
	}
	
	def Class<? extends TerminalsTokenTypeToPartitionMapper> bindTerminalsTokenTypeToPartitionMapper() {
		return TokenTypeToPartitionMapper
	}
	
//	override configureHighlightingLexer(Binder binder) {
//		binder.bind(org.eclipse.xtext.parser.antlr.Lexer)
//			.annotatedWith(Names.named(LexerIdeBindings.HIGHLIGHTING))
//			.to(InternalConfigModelCustomLexer);
//	}
	
//	override configureContentAssistLexer(Binder binder) {
//		binder.bind(Lexer)
//			.annotatedWith(Names.named(LexerIdeBindings.CONTENT_ASSIST))
//			.to(InternalConfigModelCustomLexer);
//	}
	
}
