/*
 * generated by Xtext 2.19.0
 */
package org.sa.rainbow.configuration.ui.wizard
/*
Copyright 2020 Carnegie Mellon University

Permission is hereby granted, free of charge, to any person obtaining a copy of this 
software and associated documentation files (the "Software"), to deal in the Software 
without restriction, including without limitation the rights to use, copy, modify, merge,
 publish, distribute, sublicense, and/or sell copies of the Software, and to permit 
 persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all 
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR 
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE 
FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.
 */
import java.io.BufferedReader
import java.io.IOException
import java.io.InputStreamReader
import java.net.URL
import java.util.HashMap
import java.util.regex.Pattern
import org.eclipse.core.runtime.Status
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.JavaProjectFactory
import org.eclipse.xtext.ui.util.ProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class RclProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new RainbowProject]
	}
}

@ProjectTemplate(label="Rainbow Deployment", icon="rainbow.png", description="<p><b>Rainbow Deployment</b></p>
<p>This is a deployment project for Rainbow. You can set a parameters to modify the src diretories and the rainbow directories.</p>")
public class RainbowProject {
	
	
	val advanced = check("File Layout:", false)
	val advancedGroup = group("Properties:")
	val generateJavaCode = check("Generate Java source", true, advancedGroup)
	val srcPackage = text("Source package:", "src/main/java/", "The directory to place Java source files.", advancedGroup)
	val srcGenPackage = text("Generated source:", "src/main/java-gen", "The directory to place generated Java source files", advancedGroup)
	val rbwSrc = text("Target definitions:", "src/main/resources/rbw", "The directory to place Rainbow target definitions", advancedGroup)
	val rbwGen = text("Generated target files:", "src/main/resources/generated", "The directory to place generated target files", advancedGroup)
	val createRCLFiles = check("Generate RCL file templates", true)
	val targetSpecifiction = group("Target Contents:")
	
	val deploymentType = combo("Deployment style:", #["Single Machine", "Multiple Machines", "Custom Deployment"], "The deployment type of Rainbow", targetSpecifiction);
	val customDeployment = text("Port Factory", "", "Specify the port factory to use", targetSpecifiction);
	val useAcmeAndStitch = check('Use Acme and Stitch', true, targetSpecifiction)
	val generateRCLModelFactory = check("Generate RCL model factory", true, targetSpecifiction)
	val modelFactoryName = text("Model Factory:", "DefaultModelFactory", targetSpecifiction)
	override protected updateVariables () {
		generateJavaCode.enabled = advanced.value
		srcPackage.enabled = advanced.value && generateJavaCode.value
		rbwSrc.enabled = advanced.value
		srcGenPackage.enabled = advanced.value
		rbwGen.enabled = advanced.value
		if (!advanced.value) {
			rbwSrc.value = "src/main/resources/rbw"
			if (generateJavaCode.value)
				srcPackage.value="src/main/java/"
			
		}
		
		targetSpecifiction.enabled = createRCLFiles.value
		if (!createRCLFiles.value) {
			deploymentType.value="Single Machine"
			useAcmeAndStitch.value = true
		}
		deploymentType.enabled = createRCLFiles.value
		useAcmeAndStitch.enabled = createRCLFiles.value
		customDeployment.enabled = deploymentType.value == "Custom Deployment"
		if (deploymentType != "Custom Deployment") {
			customDeployment.value = deploymentType.value
		}
		generateRCLModelFactory.enabled = createRCLFiles.value
		modelFactoryName.enabled = createRCLFiles.value && generateRCLModelFactory.value
		
	}
	
	override protected validate() {
		if (generateJavaCode.value && !srcPackage.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*'))
			new Status(ERROR, "Wizard", '''Path '«srcPackage»' is not a valid package name''')
		if (rbwSrc.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*'))
			null
		else
			new Status(ERROR, "Wizard", '''Path '«rbwSrc»' is not a valid package name''')
	}
	

	
	def addProjectFiles(JavaProjectFactory tgt) {
		
		val replacements = ProjectHelper.generateReplacements(projectInfo.projectName, deploymentType.value, customDeployment.value, modelFactoryName.value,
			srcGenPackage.value, rbwGen.value, rbwSrc.value, useAcmeAndStitch.value
		)
		
		val pattern = ProjectHelper.generatePattern(replacements)
		tgt.addFile("pom.xml", ProjectHelper.readFile("templates/pom.xml_default", replacements, pattern))
		if (createRCLFiles.value) {
			val tgtLoc = rbwSrc.value + "/" + projectInfo.projectName
			tgt.addFile(
				tgtLoc + "/properties.rbw", 
				ProjectHelper.readFile("templates/properties.rbw_template", replacements, pattern)
			)
			tgt.addFile(tgtLoc + "/model/gauges.rbw", ProjectHelper.readFile("templates/gauges.rbw_default", replacements, pattern))
			tgt.addFile(tgtLoc + "/system/probes.rbw", ProjectHelper.readFile("templates/probes.rbw_default", replacements, pattern))
			tgt.addFile(tgtLoc + "/system/effectors.rbw", ProjectHelper.readFile("templates/effectors.rbw_default", replacements, pattern))
			
			if (useAcmeAndStitch.value) {
				tgt.addFile(tgtLoc + "/stitch/stitch.s", "// Edit to add StitchsStrategies and tactics")
				tgt.addFile(tgtLoc + "/model/model.acme", "// Edit to add Acme model")
				tgt.addFile(tgtLoc + "/stitch/utilities.rbw", ProjectHelper.readFile('templates/utilities.rbw_default', replacements, pattern))
			}
			if (generateRCLModelFactory.value) {
				tgt.addFile(rbwSrc + "/" + modelFactoryName.value + ".rbw", ProjectHelper.readFile("templates/modelfactory.rbw_default", replacements, pattern))
			}
		}
	}
	

	
	override generateProjects(IProjectGenerator generator) {
		generator.generate(new JavaProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += XtextProjectHelper.NATURE_ID
			builderIds += XtextProjectHelper.BUILDER_ID
			folders += rbwSrc.value
			if (generateJavaCode.value) {
				projectNatures += #["org.eclipse.jdt.core.javanature", "org.eclipse.m2e.core.maven2Nature"]
				builderIds += #["org.eclipse.m2e.core.maven2Builder", "org.eclipse.jdt.core.javabuilder"]
				addSourceFolder(srcPackage.value, "target/classes", false)
				addSourceFolder(srcGenPackage.value, "target/classes", false)
			}
			addProjectFiles(it)
		])
	}
	
}
