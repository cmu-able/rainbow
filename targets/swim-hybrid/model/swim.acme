Family EnvType = {

    Property Type ResourceStatePropT = Record [unit : string; total : float; available : float; used : float; ];
    Port Type PartPortT = {

    }
    Port Type NetworkPortT = {

    }
    Port Type ArchPortT = {

        Property isArchEnabled : boolean <<  default : boolean = true; >> ;

    }
    Port Type ContainmentPortT = {

    }
    Component Type ArchElementT = {

        Property isArchEnabled : boolean <<  default : boolean = true; >> ;

    }
    Component Type NodeT = {

        Property cpuOverall : ResourceStatePropT;

        Property memoryMain : ResourceStatePropT;

        Property storageLocal : ResourceStatePropT;

        Property socketPool : ResourceStatePropT;

        Property batteryOverall : ResourceStatePropT;

    }
    Role Type ArchRoleT = {

        Property isArchEnabled : boolean <<  default : boolean = true; >> ;

    }
    Role Type NetworkRoleT = {

    }
    Role Type PartRoleT = {

    }
    Role Type ContainerRoleT = {

    }
    Connector Type MappingT = {

    }
    Connector Type EdgeT = {

        Property bandwidthAvg : ResourceStatePropT;

        Property capacity : ResourceStatePropT;

    }
    Connector Type ArchConnT = {

        Property isArchEnabled : boolean <<  default : boolean = true; >> ;

    }
}

Family SwimFam extends EnvType with {

    Port Type HttpPortT extends ArchPortT with {

    }
    Port Type ProxyForwardPortT extends ArchPortT with {

    }
    Port Type HttpReqPortT extends ArchPortT with {

    }
    Component Type LoadBalancerT extends ArchElementT with {

        Property deploymentLocation : string <<  default : string = "localhost"; >> ;

        Property dimmer : float <<  default : float = 1.0; >> ;

        Property arrivalRate : float <<  default : float = 0.0; >> ;

        Property averageResponseTime : float <<  default : float = 0.0; >> ;

    }
    Component Type ServerT extends ArchElementT with {
        Port http0 : HttpPortT = new HttpPortT extended with {

            Property isArchEnabled = true;

        }
        Property deploymentLocation : string <<  default : string = "localhost"; >> ;

        Property traffic : float <<  default : float = 0.0; >> ;

        Property max_arrival_capacity : int;
        Property max_arrival_capacity_low : int;

	    Property index : int; 

	    Property isActive : boolean <<  default : boolean = true; >> ;

    	Property expectedActivationTime : int <<  default : int = 0; >> ;

        Property reqServiceRate : float <<  default : float = 0.0; >> ;

        Property byteServiceRate : float <<  default : float = 0.0; >> ;

        Property cost : float <<  default : float = 1.0; >> ;

    }
    Role Type ReceiverRoleT extends ArchRoleT with {

    }
    Role Type RequestorRoleT extends ArchRoleT with {

    }
    Connector Type ProxyConnT extends ArchConnT with {
        Role req : RequestorRoleT = new RequestorRoleT extended with {

        }
        Role rec : ReceiverRoleT = new ReceiverRoleT extended with {

        }

    }

    Property DIMMER_LEVELS : int <<  default : int = 3; >>; 
    Property ADD_SERVER_LATENCY_SEC : int;
    Property THREADS_PER_SERVER : int  <<  default : int = 100; >>;
    Property RT_THRESHOLD : float;
}

System SwimSys : SwimFam = new SwimFam extended with {

    Component server1 : ServerT = new ServerT extended with {
        Property deploymentLocation = "${customize.system.target.web0}";
        Property max_arrival_capacity = 200;
        Property max_arrival_capacity_low = 400;
        Property cost = 1.0;
    	Property index = 1;
        Property traffic = 4;
	    Property isArchEnabled = true;
	    Property isActive = true;
    }
    Component server2 : ServerT = new ServerT extended with {
        Property deploymentLocation = "${customize.system.target.web1}";
        Property max_arrival_capacity = 140;
        Property max_arrival_capacity_low = 280;
        Property cost = 0.7;
    	Property index = 2;
        Property traffic = 0;
	    Property isArchEnabled = false;
	    Property isActive = false;
    }
    Component server3 : ServerT = new ServerT extended with {
        Property deploymentLocation = "${customize.system.target.web2}";
        Property max_arrival_capacity = 100;
        Property max_arrival_capacity_low = 200;
        Property cost = 0.5;
    	Property index = 3;
        Property traffic = 0;
	    Property isArchEnabled = false;
	    Property isActive = false;
    }

    Component LB0 : LoadBalancerT = new LoadBalancerT extended with {
        Port fwd1 : ProxyForwardPortT = new ProxyForwardPortT;
        Port fwd2 : ProxyForwardPortT = new ProxyForwardPortT;
        Port fwd3 : ProxyForwardPortT = new ProxyForwardPortT;

        Property deploymentLocation = "${customize.system.target.lb}";

        Property isArchEnabled = true;
    }
    Connector proxyConn_1_0 : ProxyConnT = new ProxyConnT;
    Connector proxyConn_2_0 : ProxyConnT = new ProxyConnT;
    Connector proxyConn_3_0 : ProxyConnT = new ProxyConnT;
    
    Attachment server1.http0 to proxyConn_1_0.rec;
    Attachment server2.http0 to proxyConn_2_0.rec;
    Attachment server3.http0 to proxyConn_3_0.rec;
    Attachment LB0.fwd1 to proxyConn_1_0.req;
    Attachment LB0.fwd2 to proxyConn_2_0.req;
    Attachment LB0.fwd3 to proxyConn_3_0.req;

    Property DIMMER_LEVELS = 3;
    Property RT_THRESHOLD = 1.00;
    Property ADD_SERVER_LATENCY_SEC = 120;
    Property THREADS_PER_SERVER = 1000;
}

