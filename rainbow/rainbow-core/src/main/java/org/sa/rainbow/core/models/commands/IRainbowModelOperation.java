/*
 * The MIT License
 *
 * Copyright 2014 CMU ABLE Group.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.sa.rainbow.core.models.commands;

import org.sa.rainbow.core.error.RainbowException;
import org.sa.rainbow.core.event.IRainbowMessage;
import org.sa.rainbow.core.models.IModelInstance;
import org.sa.rainbow.core.ports.IRainbowMessageFactory;

import java.util.List;

/**
 * This interface represents an executable command. It is generated by a ModelCommandFactory instance. A command has the
 * following state transistion:
 * <ul>
 * <li>canExecute -> execute -> canUndo = true | false & canExecute = false & canRedo = false</li>
 * <li>canUndo -> undo -> canRedo = true | false & canExecute = false & canUndo = false</li>
 * <li>canRedo -> redo -> canUndo = true | false & canExecute = false & canRedo = false</li>
 * </ul>
 * On executing the command, the model that the command runs on and the way of generating messages is fixed.
 * 
 * @author Bradley Schmerl: schmerl
 * 
 * @param <Type>
 *            The type that the command can (optionally) return
 * @param <Model>
 *            The kind of model that the command works on
 */
public interface IRainbowModelOperation<Type, Model> extends IRainbowOperation {

    /**
     * Executes a command on a particular model. Unless an exception occurs, the model will be updated in which case a
     * list of messages (events) describing the actual changes is made
     * 
     * @param context
     *            The model on which the command is executed. Once the context is set, it cannot be changed.
     * @param messageFactory
     *            The factory through which commands are created, for describing updates to the model
     * @return The list of events generated by executing the command
     * @throws IllegalStateException
     *             Is thrown if the command is not executable
     * @throws RainbowException
     *             Is thrown is there is an error in updating the model
     */
    List<? extends IRainbowMessage>
    execute (IModelInstance<Model> context, IRainbowMessageFactory messageFactory)
            throws IllegalStateException, RainbowException;

    /**
     * Redoes a command on the context (that was defined by execute). Can only be redone if the command has been undone
     * 
     * @return The list of events generated by redoing the command
     * @throws IllegalStateException
     *             Thrown if the command is not redoable (i.e., has not been undone)
     * @throws RainbowException
     *             Is thrown if there is an error when redoing the command
     */
    List<? extends IRainbowMessage> redo () throws IllegalStateException, RainbowException;

    /**
     * Undoes a command on the context (that was defined by execute). The command can only be undone if it has been
     * executed or redone.
     * 
     * @return The list of events generated by redoing the command
     * @throws IllegalStateException
     *             Thrown if the command is not undoable (i.e., has not been executed or redone)
     * @throws RainbowException
     *             Is thrown if there is an error when undoing the command
     */
    List<? extends IRainbowMessage> undo () throws IllegalStateException, RainbowException;

    /**
     * 
     * @return whether the command is executable
     */
    boolean canExecute ();

    /**
     * 
     * @return whether the command is undoable
     */
    boolean canUndo ();

    /**
     * 
     * @return whether the command is redoable
     */
    boolean canRedo ();

    /**
     * Can be used to get the result of the command.
     * 
     * @return
     * @throws IllegalStateException
     *             if the command has not been executed
     */
    Type getResult () throws IllegalStateException;

}
